#define game 0;

typedef struct {
  uint32 value <format=binary>;
} normals_t<read=normals_tRead>;

string normals_tRead( normals_t &value ) {
    string s;
    int nx = value.value & ((1<<10)-1);
    int ny = (value.value>>10) & ((1<<10)-1);
    int nz = (value.value>>20) & ((1<<10)-1);
    int sign = nx & (1<<9);
    if (sign) {
      nx ^= sign;
      nx = -(sign-nx);
    }
    sign = ny & (1<<9);
    if (sign) {
      ny ^= sign;
      ny = -(sign-ny);
    }
    sign = nz & (1<<9);
    if (sign) {
      nz ^= sign;
      nz = -(sign-nz);
    }
    float fx = (float)nx/(float)((1<<9)-1);
    float fy = (float)ny/(float)((1<<9)-1);
    float fz = (float)nz/(float)((1<<9)-1);
    float nrm = Sqrt(fx*fx + fy*fy + fz*fz);
    SPrintf(s, "nx: %f, ny: %f, nz: %f, nrm: %f", fx, fy, fz, nrm);
    return s;
}

typedef struct  {
    uint32 val;
} ubyteList<read=ubyteListRead>;

string ubyteListRead( ubyteList &value ) {
    string s;
    SPrintf(s, "%3d, %3d, %3d, %3d", value.val & 0xff , (value.val >> 8) & 0xff, (value.val >> 16) & 0xff, (value.val >> 24) & 0xff);
    return s;
}

typedef uint32 tangents_t<read=tangents_tRead>;

string tangents_tRead(uint32 value) {
    string s;
    float tx = tangentRead(value & 0xff);
    float ty = tangentRead((value >> 8 ) & 0xff);
    float tz = tangentRead((value >> 16 ) & 0xff);
    float d = tangentRead((value >> 24 ) & 0xff);
    float nrm = Sqrt(tx*tx + ty*ty + tz*tz);
    SPrintf(s, "tx: %f, ty: %f, tz: %f, sign: %f, nrm: %f", tx, ty, tz, d, nrm);
    return s;
}

BigEndian();
char id[4] <hidden=true>;
Assert( Memcmp("\0BMW", id, 4) == 0, "Wrong file type");
FSeek(0);
#include "Bayonetta wmb base.bt"
